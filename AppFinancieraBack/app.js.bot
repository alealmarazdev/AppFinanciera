const express = require('express')
const cfenv = require('cfenv')
const cors = require('cors')

const watson = require('watson-developer-cloud')
var bodyParser = require('body-parser')
// app.use(cors({origin:false}));
// IAM
var wconvVersionDate = '2018-09-20'
var wconvWorkSpaceId = '2f65e52d-347a-4d8f-9e27-d3f3283e9146'
var wconvApikey = 'FUf1yvngoWhzqjHlGT586q-61aXOmI9GxQP8f_H5nkEN'
var wconvUrl = 'https://gateway.watsonplatform.net/assistant/api'

var app = express()
var appEnv = cfenv.getAppEnv()
var session = require('express-session')

/* const itemsRoutes = require('./routes/item') */

const db = require('./lib/db')

const itemsRoutes = require('./routes/item')
const userRoutes = require('./routes/user')

// serve the files out of ./public as our main files
app.use(express.static(`${__dirname} + '/public'`))
app.use(bodyParser.json()) // to support JSON-encoded bodies
app.use(cors())
app.use(bodyParser.urlencoded({ // to support URL-encoded bodies
  extended: true
}))

app.set('trust proxy', 1) // trust first proxy
app.use(session({
  secret: 'keyboard cat',
  resave: false,
  saveUninitialized: true,
  cookie: { secure: false }
}))

/* app.get('/chat', function (req, res) {
    res.sendFile(__dirname + '/public/chatv2.html');
});
 */
app.get('/', function (req, res) {
  // IAM
  var assistant = new watson.AssistantV1({
    iam_apikey: wconvApikey,
    version: wconvVersionDate,
    url: wconvUrl
  })

  var username = req.query.username

  assistant.message({
    workspace_id: wconvWorkSpaceId,
    input: { 'text': '' },
    context: {
      'USERNAME': username,
      'CANAL': 'WEB'
    }
  },
  function (err, response) {
    session.context = response.context
    let msgOut = ''
    let additionalText = ''
    let sysName = 'IBM Watson'
    let avatar = 'post'
    let cssClass = 'watson'
    for (let i = 0; i < response.output.text.length; i++) {
     ` <section class=\'${post\}'>
      <header class=\"post-header-watson\">
      <img width='48' height='48' alt='img' class='' + ${avatar} + '-avatar-w' src='images/avatar-' + ${cssClass} + '.png'>
      <h2 class='post-title-' + ${cssClass} + ''>@' + ${sysName} + '</h2>'
      </header>
      <div class=\"post-description-' + ${cssClass} + '">'
      ${response.output.text[i]}
     ${additionalText}
      </div>
     </section>`
    }
    res.send(msgOut)
  })
})

app.get('/sendMessage', function (req, res) {
  var message = req.query.message
  var savedContext = session.context
  var username = req.query.username

  // IAM
  var assistant = new watson.AssistantV1({
    iam_apikey: wconvApikey,
    version: wconvVersionDate,
    url: wconvUrl
  })

  // IAM
  assistant.message({
    workspace_id: wconvWorkSpaceId,
    input: { 'text': message },
    context: savedContext
  },
  function (err, response) {
    session.context = response.context
    var additionalText = ''
    if (response.context.BANDERA_UBICACION !== undefined) {
      var additionalText = '<br><iframe ' +
        'src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3764.180449439749!2d-99.27662588457551!3d19.361337747971394!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x85d200e109a496a5%3A0x29bbf597c634a976!2sLiverpool!5e0!3m2!1sen!2sus!4v1545231476611"' +
        'width="700" height="400" frameborder="0"'
      'style="border:0" allowfullscreen></iframe>'
      delete response.context.BANDERA_UBICACION
      callback(res, username, message, response, additionalText)
    } else if (response.context.BANDERA_COTIZAR !== undefined) {
      var request = require('request')
      // url to API
      var tipoPrenda = response.context.CATEGORIA_PRODUCTO
      var url_database = req.protocol + '://' + req.get('host') + '/calldatabase?tipo=' + tipoPrenda
      request(url_database, function (error, responseAPI, bodyAPI) {
        var datos_api = JSON.parse(bodyAPI)
        index_Start = response.entities[0].location[0]
        indext_End = response.entities[0].location[1]
        response.context.PRENDA = response.input.text.substr(index_Start, indext_End - index_Start)
        response.context.PROMOCIONES = datos_api.promociones
        response.context.PROMOCIONES_OK = 'true'
        assistant.message({
          workspace_id: wconv_workspaceId,
          input: { 'text': message },
          context: response.context
        },
        function (err, response2) {
          delete response.context.BANDERA_COTIZAR
          session.context = response2.context
          callback(res, username, message, response2, additionalText)
        })
      })
    } else {
      callback(res, username, message, response, additionalText)
    }
  })
})

function callback (res, username, message, watsonresponse, additionalText) {
  let msgOut = 
  `<div class ='chatbot-dialog'>
      <i class='fas fa-user' aria-hidden='true'></i>
      <span id='divPosts'>
        ${message}
      </span>
    </div>

    <div class='chatbot-dialog'>
      <i class='fas fa-robot' aria-hidden='true'></i>
      <span id='divPosts'>
        ${watsonresponse.output.text.join('<br>')}
        ${additionalText}
      </span>
    </div>
  `
  res.send(msgOut)
}

// start server on the specified port and binding host
app.listen(appEnv.port, '0.0.0.0', function () {
  console.log('server starting on ' + appEnv.url)
  db.connect()
    .then(() => console.log('DB connected'))
    .catch(() => console.error('DB error while connecting'))
})

app.get('/calldatabase', function (req, res) {
  var tipo = req.query.tipo
  switch (tipo) {
    case 'Bottom':
      promo = 'En prendas inferiores tenemos ' + Math.floor(Math.random() * Math.floor(25)) + '% de descuento.'
      break
    case 'Top':
      promo = 'En prendas superiores tenemos ' + Math.floor(Math.random() * Math.floor(50)) + '% de descuento.'
      break
    case 'Joyería':
      promo = 'En joyería tenemos ' + (12 + Math.floor(Math.random() * Math.floor(12))) + ' meses sin intereses'
      break
  }

  var result = {
    'promociones': promo
  }
  res.send(result)
})

app.use('/', userRoutes)
app.use('/items', itemsRoutes)
